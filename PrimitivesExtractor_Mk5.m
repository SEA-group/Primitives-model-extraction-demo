% An experimental primitives model extractor, prototype
% version 2020.07.28.a
% requires PrimitivesReader_Mk5.m

tic
clc
clear
close all;
format long;

fileNames = dir('Queue/*.primitives');

for indFileInFolder = 1: size(fileNames, 1)
    
    fileName = fileNames(indFileInFolder).name(1: end-11);

    %% Extract data from primitives file

    sectionName = PrimitivesReader_Mk5(['Queue/', fileName, '.primitives']);

    for indSect = 1:size(sectionName,1) 
        sectionTitle{indSect} = sectionName{indSect, 1};
        sectionClass{indSect} = sectionName{indSect, 2};         
        sectionType{indSect} = sectionName{indSect, 3};
    end

    %% Save geometries

    for indSect = 1:size(sectionName, 1)

        if length(sectionClass{indSect})>=7 && strcmp(sectionClass{indSect}(1: 7), 'indices')

            % load indices and indice groups
            files = dir(['temps/', num2str(indSect), '_indices_*']);
            for indFile = 1: length(files)
                load(['temps/', files(indFile).name]);
            end
            clear files indFile;

            % load vertices
            for indSect2 = 1:size(sectionName, 1)
                if length(sectionClass{indSect2})>=8 && strcmp(sectionClass{indSect2}(1: 8), 'vertices')
                    if strcmp(sectionTitle{indSect2}, sectionTitle{indSect})
                        disp(num2str(indSect2));
                        files = dir(['temps/', num2str(indSect2), '_vertices_*']);
                        for indFile = 1: length(files)
                            load(['temps/', files(indFile).name]);
                        end
                        clear files indFile;
                    end
                end
            end
            clear indSect2;

            % create file
            if ~exist('./Extract', 'dir') 
                mkdir('./Extract') 
            end
            Fobj = fopen(['./Extract/', fileName, '.', sectionTitle{indSect}, '.obj'], 'w');
            fprintf(Fobj, '%s\r\n%s\r\n\r\n', '# obj file generated by PrimitivesExtractor Mk5 prototype by SEA group', '# Program working in progress, for test purpose only');
            
            if size(data_vertices_mat, 2)==13   % type==xyznuviiiww_
                
                % traverse groups
                for indGroup = 1: size(data_group_mat,1)
                    
                    % create a list of entities
                    for indVert = data_group_mat(indGroup,3):data_group_mat(indGroup,4)
                        listEntity(indVert) = data_vertices_mat(indVert,9)*256^4 ...
                                            + data_vertices_mat(indVert,10)*256^3 ...
                                            + data_vertices_mat(indVert,11)*256^2 ...
                                            + data_vertices_mat(indVert,12)*256 ...
                                            + data_vertices_mat(indVert,13);
                    end
                    listEntityUnique = unique(listEntity);
                    listEntityHex = dec2hex(listEntityUnique);
                    if size(listEntityHex, 2)<10
                        listEntityHex = [num2str(zeros(size(listEntityHex, 1), 10-size(listEntityHex, 2))), listEntityHex];
                    end

                    % write vertices
                    disp(['Converting vertices of ',  sectionTitle{indSect}]);
                    for indVert = data_group_mat(indGroup,3):data_group_mat(indGroup,4)
                        fprintf(Fobj, 'v %f %f %f\r\n', data_vertices_mat(indVert,1), data_vertices_mat(indVert,2), data_vertices_mat(indVert,3));
                    end

                    disp(['Converting vertex normals of ',  sectionTitle{indSect}]);
                    for indVert = data_group_mat(indGroup,3):data_group_mat(indGroup,4)
                        fprintf(Fobj, 'vn %f %f %f\r\n', data_vertices_mat(indVert,4), data_vertices_mat(indVert,5), data_vertices_mat(indVert,6));
                    end

                    disp(['Converting texture coordinates of ',  sectionTitle{indSect}]);
                    for indVert = data_group_mat(indGroup,3):data_group_mat(indGroup,4)
                        fprintf(Fobj, 'vt %f %f\r\n', data_vertices_mat(indVert,7), data_vertices_mat(indVert,8));
                    end

                    % write triangles
                    for indEntity = 1: length(listEntityUnique)
                        fprintf(Fobj, 'g %s\r\n', listEntityHex(indEntity, :));                        
                        for indTriang = data_group_mat(indGroup,1):data_group_mat(indGroup,2)
                            if listEntity(data_Indices_mat(indTriang,1))==listEntityUnique(indEntity)
                                fprintf(Fobj, 'f %d/%d/%d %d/%d/%d %d/%d/%d\r\n', ...
                                    data_Indices_mat(indTriang,1), data_Indices_mat(indTriang,1), data_Indices_mat(indTriang,1), ...
                                    data_Indices_mat(indTriang,2), data_Indices_mat(indTriang,2), data_Indices_mat(indTriang,2), ...
                                    data_Indices_mat(indTriang,3), data_Indices_mat(indTriang,3), data_Indices_mat(indTriang,3));
                            end
                        end
                    end
                    
                    clear listEntity listEntityHex listEntityUnique

                end
                
            else
                
                if size(data_group_mat,1)==1
                    
                    % write vertices
                    disp(['Converting vertices of ',  sectionTitle{indSect}]);
                    for indVert = 1:size(data_vertices_mat,1)
                        fprintf(Fobj, 'v %f %f %f\r\n', data_vertices_mat(indVert,1), data_vertices_mat(indVert,2), data_vertices_mat(indVert,3));
                    end

                    disp(['Converting vertex normals of ',  sectionTitle{indSect}]);
                    for indVert = 1:size(data_vertices_mat,1)
                        fprintf(Fobj, 'vn %f %f %f\r\n', data_vertices_mat(indVert,4), data_vertices_mat(indVert,5), data_vertices_mat(indVert,6));
                    end

                    disp(['Converting texture coordinates of ',  sectionTitle{indSect}]);
                    for indVert = 1:size(data_vertices_mat,1)
                        fprintf(Fobj, 'vt %f %f\r\n', data_vertices_mat(indVert,7), data_vertices_mat(indVert,8));
                    end

                    % write triangles
                    fprintf(Fobj, 'g 0000000000\r\n');
                    for indTriang = 1:size(data_Indices_mat,1)
                        fprintf(Fobj, 'f %d/%d/%d %d/%d/%d %d/%d/%d\r\n', ...
                            data_Indices_mat(indTriang,1), data_Indices_mat(indTriang,1), data_Indices_mat(indTriang,1),...
                            data_Indices_mat(indTriang,2), data_Indices_mat(indTriang,2), data_Indices_mat(indTriang,2),...
                            data_Indices_mat(indTriang,3), data_Indices_mat(indTriang,3), data_Indices_mat(indTriang,3));
                    end
                    
                else
                    
                    % parcourir groups
                    for indGroup = 1: size(data_group_mat,1)

                        % write vertices
                        disp(['Converting vertices of ',  sectionTitle{indSect}]);
                        for indVert = data_group_mat(indGroup,3):data_group_mat(indGroup,4)
                            fprintf(Fobj, 'v %f %f %f\r\n', data_vertices_mat(indVert,1), data_vertices_mat(indVert,2), data_vertices_mat(indVert,3));
                        end

                        disp(['Converting vertex normals of ',  sectionTitle{indSect}]);
                        for indVert = data_group_mat(indGroup,3):data_group_mat(indGroup,4)
                            fprintf(Fobj, 'vn %f %f %f\r\n', data_vertices_mat(indVert,4), data_vertices_mat(indVert,5), data_vertices_mat(indVert,6));
                        end

                        disp(['Converting texture coordinates of ',  sectionTitle{indSect}]);
                        for indVert = data_group_mat(indGroup,3):data_group_mat(indGroup,4)
                            fprintf(Fobj, 'vt %f %f\r\n', data_vertices_mat(indVert,7), data_vertices_mat(indVert,8));
                        end

                        % write triangles
                        fprintf(Fobj, 'g 0000000000\r\n');
                        for indTriang = data_group_mat(indGroup,1):data_group_mat(indGroup,2)
                            fprintf(Fobj, 'f %d/%d/%d %d/%d/%d %d/%d/%d\r\n', ...
                                data_Indices_mat(indTriang,1), data_Indices_mat(indTriang,1), data_Indices_mat(indTriang,1),...
                                data_Indices_mat(indTriang,2), data_Indices_mat(indTriang,2), data_Indices_mat(indTriang,2),...
                                data_Indices_mat(indTriang,3), data_Indices_mat(indTriang,3), data_Indices_mat(indTriang,3));
                        end

                    end
                    
                end
            
            end

            fclose(Fobj);
            clear Fobj;

            % end
            clear data_group_mat data_Indices_mat data_vertices_mat;

        elseif strcmp(sectionClass{indSect}(1: 5), 'armor')

            load(['temps/', num2str(indSect),'_armorlist_count.mat']);
            load(['temps/', num2str(indSect),'_armorlist_id.mat']);
            load(['temps/', num2str(indSect),'_armorlist_vertices.mat']);

            % create file
            if ~exist('./Extract', 'dir') 
                mkdir('./Extract') 
            end
            Fobj = fopen(['./Extract/', fileName, '.Armor_', sectionTitle{indSect}, '.obj'], 'w');
            fprintf(Fobj, '%s\r\n%s\r\n\r\n', '# obj file generated by PrimitivesExtractor Mk3 prototype by SEA group', '# Program working in progress, for test purpose only');

            % write vertices
            for indArmor = 1: length(Armor_vertices) 
                for indVert = 1: size(Armor_vertices{indArmor}, 1)
                    fprintf(Fobj, 'v %f %f %f\r\n', Armor_vertices{indArmor}(indVert,1), Armor_vertices{indArmor}(indVert,2), Armor_vertices{indArmor}(indVert,3));
                end     
            end

    %         for indArmor = 1: length(Armor_vertices) 
    %             for indVert = 1: size(Armor_vertices{indArmor}, 1)
    %                 fprintf(Fobj, 'vn %f %f %f\r\n', Armor_vertices{indArmor}(indVert,4), Armor_vertices{indArmor}(indVert,5), Armor_vertices{indArmor}(indVert,6));
    %             end     
    %         end

            % write triangles
            indCount = 1;
            for indArmor = 1: length(Armor_vertices)
                fprintf(Fobj, 'g %d\r\n', Armor_ID(indArmor));
                for indTriang = 1: size(Armor_vertices{indArmor}, 1)/3
                    fprintf(Fobj, 'f %d %d %d\r\n', indCount, indCount+1, indCount+2);
                    indCount = indCount+3;
                end
            end

            fclose(Fobj);
            clear Fobj;

            % end
            clear Armor_vertices Armor_count Armor_unknown;

        end

    end

    rmdir temps s;

end

%% Finish

fclose all;
toc
